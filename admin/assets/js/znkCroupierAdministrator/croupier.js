Ext.ns("App");
App.config = App.config||{debug:false};
/**
 * Croupier Server-API Communicator
 * @memberOf App
 * @namespace App
 * @class API
 * 
 * @returns {App.API} description
 */
App.API = Ext.extend(Ext.util.Observable,{
   $allEventReceived: false,
   
   constructor: function()
        {
          App.API.superclass.constructor.apply(this,arguments);
	// BEGIN AUTOGENERATED
	// Version.
	this.Version=
	{
		MAJOR:1,
		MINOR:2,
		MICRO:0
	};
	// Constants.
	this.ResponseStatus=
	{
		SUCCESS:0,
		INVALID:1,
		UNAUTHORIZED:2,
		ERROR:3,
		__names__:["SUCCESS","INVALID","UNAUTHORIZED","ERROR"]
	};
	this.NodeStatus=
	{
		DISCONNECTED:0,
		LOGGED:1,
		WAITING:2,
		UPDATING:3,
		VALIDATING:4,
		TESTING:5,
		READY:6,
		EXECUTING:7,
		PAUSED:8,
		__names__:["DISCONNECTED","LOGGED","WAITING","UPDATING","VALIDATING","TESTING","READY","EXECUTING","PAUSED"]
	};
	this.NodePermission=
	{
		remove:0,
		get:1,
		set:2,
		getSystemInfo:3,
		getRuntimeInfo:4,
		getLog:5,
		pause:6,
		resume:7,
		stop:8,
		wake:9,
		reboot:10,
		shutdown:11,
		execProcess:12,
		killProcess:13,
		cancelJobs:14,
		usePrimary:15,
		useSecondary:16,
		__names__:["remove","get","set","getSystemInfo","getRuntimeInfo","getLog","pause","resume","stop","wake","reboot","shutdown","execProcess","killProcess","cancelJobs","usePrimary","useSecondary"]
	};
	this.OsName=
	{
		AIX:0,
		Darwin:1,
		FreeBSD:2,
		HPUX:3,
		Linux:4,
		NetBSD:5,
		OpenBSD:6,
		SunOS:7,
		Windows:8,
		__names__:["AIX","Darwin","FreeBSD","HPUX","Linux","NetBSD","OpenBSD","SunOS","Windows"]
	};
	this.ProcessState=
	{
		SLEEP:0,
		RUN:1,
		STOP:2,
		ZOMBIE:3,
		IDLE:4,
		__names__:["SLEEP","RUN","STOP","ZOMBIE","IDLE"]
	};
	this.PoolPermission=
	{
		remove:0,
		get:1,
		set:2,
		moveNodes:3,
		pauseNodes:4,
		resumeNodes:5,
		stopNodes:6,
		wakeNodes:7,
		rebootNodes:8,
		shutdownNodes:9,
		cancelJobs:10,
		usePrimary:11,
		useSecondary:12,
		__names__:["remove","get","set","moveNodes","pauseNodes","resumeNodes","stopNodes","wakeNodes","rebootNodes","shutdownNodes","cancelJobs","usePrimary","useSecondary"]
	};
	this.JobStatus=
	{
		DISABLED:0,
		ENABLED:1,
		EXECUTED:2,
		ERROR:3,
		RETRY:4,
		TIMEOUT:5,
		EXECUTING:6,
		PAUSED:7,
		__names__:["DISABLED","ENABLED","EXECUTED","ERROR","RETRY","TIMEOUT","EXECUTING","PAUSED"]
	};
	this.JobPermission=
	{
		remove:0,
		get:1,
		set:2,
		__names__:["remove","get","set"]
	};
	this.UserRole=
	{
		SUPERADMINISTRATOR:0,
		USER_MANAGER:2,
		OPERATOR:3,
		__names__:["SUPERADMINISTRATOR","","USER_MANAGER","OPERATOR"]
	};
	this.UserPermission=
	{
		remove:0,
		get:1,
		set:2,
		__names__:["remove","get","set"]
	};
	this.UserGroupPermission=
	{
		remove:0,
		get:1,
		set:2,
		job:3,
		__names__:["remove","get","set","job"]
	};
	this.UserGroupPoolPermission=
	{
		VIEW:0,
		USE_SECONDARY:1,
		USE_PRIMARY:2,
		MODIFY:3,
		__names__:["VIEW","USE_SECONDARY","USE_PRIMARY","MODIFY"]
	};
	this.PresetPermission=
	{
		remove:0,
		get:1,
		set:2,
		execute:3,
		__names__:["remove","get","set","execute"]
	};
	this.CronPermission=
	{
		remove:0,
		get:1,
		set:2,
		__names__:["remove","get","set"]
	};
	this.ModificationType=
	{
		all:0,
		plugin$list:1,
		node$list:2,
		node$add:3,
		node$remove:4,
		node$set:5,
		node$setPermanent:6,
		node$setEnabled:7,
		node$setStatus:8,
		node$setBasicSystemInfo:9,
		node$setBasicRuntimeInfo:10,
		node$setJobPlugins:11,
		node$addPool:12,
		node$removePool:13,
		node$addJob:14,
		node$removeJob:15,
		pool$list:16,
		pool$add:17,
		pool$remove:18,
		pool$set:19,
		pool$setEnabled:20,
		pool$addNode:21,
		pool$removeNode:22,
		job$list:23,
		job$add:24,
		job$remove:25,
		job$set:26,
		job$setPriority:27,
		job$setStatus:28,
		job$setNode:29,
		job$setUser:30,
		job$setUserGroup:31,
		job$removePrimaryNode:32,
		job$removeSecondaryNode:33,
		job$removePrimaryPool:34,
		job$removeSecondaryPool:35,
		user$list:36,
		user$add:37,
		user$remove:38,
		user$set:39,
		user$addGroup:40,
		user$removeGroup:41,
		userGroup$list:42,
		userGroup$add:43,
		userGroup$remove:44,
		userGroup$set:45,
		userGroup$addUser:46,
		userGroup$removeUser:47,
		userGroup$removePool:48,
		userGroup$removeGroup:49,
		preset$add:50,
		preset$remove:51,
		preset$set:52,
		cron$add:53,
		cron$remove:54,
		cron$set:55,
		__names__:["all","plugin$list","node$list","node$add","node$remove","node$set","node$setPermanent","node$setEnabled","node$setStatus","node$setBasicSystemInfo","node$setBasicRuntimeInfo","node$setJobPlugins","node$addPool","node$removePool","node$addJob","node$removeJob","pool$list","pool$add","pool$remove","pool$set","pool$setEnabled","pool$addNode","pool$removeNode","job$list","job$add","job$remove","job$set","job$setPriority","job$setStatus","job$setNode","job$setUser","job$setUserGroup","job$removePrimaryNode","job$removeSecondaryNode","job$removePrimaryPool","job$removeSecondaryPool","user$list","user$add","user$remove","user$set","user$addGroup","user$removeGroup","userGroup$list","userGroup$add","userGroup$remove","userGroup$set","userGroup$addUser","userGroup$removeUser","userGroup$removePool","userGroup$removeGroup","preset$add","preset$remove","preset$set","cron$add","cron$remove","cron$set"]
	};
	this.ModificationDataAllPermission=
	{
		pool$add:0,
		user$add:1,
		userGroup$add:2,
		preset$add:3,
		cron$add:4,
		__names__:["pool$add","user$add","userGroup$add","preset$add","cron$add"]
	};
	
	// Api.
	this.api=new function()
	{
		this.cron$add                 =function(name,description,hour,minute,day,month,year,dayOfWeek,timeZone,preset,enabled,callback,scope)                                                                   {return request("cron/add",{name:name,description:description,hour:hour,minute:minute,day:day,month:month,year:year,dayOfWeek:dayOfWeek,timeZone:timeZone,preset:preset,enabled:enabled},callback,scope)};
		this.cron$get                 =function(id,callback,scope)                                                                                                                                              {return request("cron/get",{id:id},callback,scope)};
		this.cron$ids                 =function(filter,callback,scope)                                                                                                                                          {return request("cron/ids",{filter:JSON.stringify(filter)},callback,scope)};
		this.cron$list                =function(filter,callback,scope)                                                                                                                                          {return request("cron/list",{filter:JSON.stringify(filter)},callback,scope)};
		this.cron$remove              =function(ids,callback,scope)                                                                                                                                             {return request("cron/remove",{ids:JSON.stringify(ids)},callback,scope)};
		this.cron$set                 =function(id,name,description,hour,minute,day,month,year,dayOfWeek,timeZone,preset,enabled,callback,scope)                                                                {return request("cron/set",{id:id,name:name,description:description,hour:hour,minute:minute,day:day,month:month,year:year,dayOfWeek:dayOfWeek,timeZone:timeZone,preset:preset,enabled:enabled},callback,scope)};
		this.job$add                  =function(name,description,plugin,properties,priority,retries,timeout,userGroup,enabled,os,primaryNodes,secondaryNodes,primaryPools,secondaryPools,postJobs,callback,scope){return request("job/add",{name:name,description:description,plugin:plugin,properties:JSON.stringify(properties),priority:priority,retries:retries,timeout:timeout,userGroup:userGroup,enabled:enabled,os:JSON.stringify(os),primaryNodes:JSON.stringify(primaryNodes),secondaryNodes:JSON.stringify(secondaryNodes),primaryPools:JSON.stringify(primaryPools),secondaryPools:JSON.stringify(secondaryPools),postJobs:JSON.stringify(postJobs)},callback,scope)};
		this.job$get                  =function(id,callback,scope)                                                                                                                                              {return request("job/get",{id:id},callback,scope)};
		this.job$getLog               =function(id,part,callback,scope)                                                                                                                                         {return request("job/getLog",{id:id,part:part},callback,scope)};
		this.job$getProperties        =function(id,callback,scope)                                                                                                                                              {return request("job/getProperties",{id:id},callback,scope)};
		this.job$ids                  =function(filter,callback,scope)                                                                                                                                          {return request("job/ids",{filter:JSON.stringify(filter)},callback,scope)};
		this.job$list                 =function(filter,callback,scope)                                                                                                                                          {return request("job/list",{filter:JSON.stringify(filter)},callback,scope)};
		this.job$listRemoved          =function(filter,callback,scope)                                                                                                                                          {return request("job/listRemoved",{filter:JSON.stringify(filter)},callback,scope)};
		this.job$pause                =function(ids,cancel,callback,scope)                                                                                                                                      {return request("job/pause",{ids:JSON.stringify(ids),cancel:cancel},callback,scope)};
		this.job$recover              =function(ids,callback,scope)                                                                                                                                             {return request("job/recover",{ids:JSON.stringify(ids)},callback,scope)};
		this.job$remove               =function(ids,permanently,callback,scope)                                                                                                                                 {return request("job/remove",{ids:JSON.stringify(ids),permanently:permanently},callback,scope)};
		this.job$resume               =function(ids,callback,scope)                                                                                                                                             {return request("job/resume",{ids:JSON.stringify(ids)},callback,scope)};
		this.job$retry                =function(ids,callback,scope)                                                                                                                                             {return request("job/retry",{ids:JSON.stringify(ids)},callback,scope)};
		this.job$set                  =function(id,name,description,priority,retries,timeout,os,primaryNodes,secondaryNodes,primaryPools,secondaryPools,callback,scope)                                         {return request("job/set",{id:id,name:name,description:description,priority:priority,retries:retries,timeout:timeout,os:JSON.stringify(os),primaryNodes:JSON.stringify(primaryNodes),secondaryNodes:JSON.stringify(secondaryNodes),primaryPools:JSON.stringify(primaryPools),secondaryPools:JSON.stringify(secondaryPools)},callback,scope)};
		this.job$setEnabled           =function(ids,enabled,callback,scope)                                                                                                                                     {return request("job/setEnabled",{ids:JSON.stringify(ids),enabled:enabled},callback,scope)};
		this.job$setPriority          =function(ids,priority,callback,scope)                                                                                                                                    {return request("job/setPriority",{ids:JSON.stringify(ids),priority:priority},callback,scope)};
		this.node$cancelJobs          =function(ids,callback,scope)                                                                                                                                             {return request("node/cancelJobs",{ids:JSON.stringify(ids)},callback,scope)};
		this.node$execProcess         =function(id,command,arguments,callback,scope)                                                                                                                            {return request("node/execProcess",{id:id,command:command,arguments:arguments},callback,scope)};
		this.node$get                 =function(id,callback,scope)                                                                                                                                              {return request("node/get",{id:id},callback,scope)};
		this.node$getEnabled          =function(id,callback,scope)                                                                                                                                              {return request("node/getEnabled",{id:id},callback,scope)};
		this.node$getJobPlugins       =function(id,callback,scope)                                                                                                                                              {return request("node/getJobPlugins",{id:id},callback,scope)};
		this.node$getLog              =function(id,callback,scope)                                                                                                                                              {return request("node/getLog",{id:id},callback,scope)};
		this.node$getPermanent        =function(id,callback,scope)                                                                                                                                              {return request("node/getPermanent",{id:id},callback,scope)};
		this.node$getRuntimeInfo      =function(id,callback,scope)                                                                                                                                              {return request("node/getRuntimeInfo",{id:id},callback,scope)};
		this.node$getSession          =function(id,callback,scope)                                                                                                                                              {return request("node/getSession",{id:id},callback,scope)};
		this.node$getSystemInfo       =function(id,callback,scope)                                                                                                                                              {return request("node/getSystemInfo",{id:id},callback,scope)};
		this.node$ids                 =function(filter,callback,scope)                                                                                                                                          {return request("node/ids",{filter:JSON.stringify(filter)},callback,scope)};
		this.node$killProcess         =function(id,pid,callback,scope)                                                                                                                                          {return request("node/killProcess",{id:id,pid:pid},callback,scope)};
		this.node$list                =function(filter,callback,scope)                                                                                                                                          {return request("node/list",{filter:JSON.stringify(filter)},callback,scope)};
		this.node$pause               =function(ids,cancelJobs,callback,scope)                                                                                                                                  {return request("node/pause",{ids:JSON.stringify(ids),cancelJobs:cancelJobs},callback,scope)};
		this.node$reboot              =function(ids,callback,scope)                                                                                                                                             {return request("node/reboot",{ids:JSON.stringify(ids)},callback,scope)};
		this.node$remove              =function(ids,callback,scope)                                                                                                                                             {return request("node/remove",{ids:JSON.stringify(ids)},callback,scope)};
		this.node$resume              =function(ids,callback,scope)                                                                                                                                             {return request("node/resume",{ids:JSON.stringify(ids)},callback,scope)};
		this.node$set                 =function(id,permanent,plugin,properties,enabled,jobPluginsEnabled,callback,scope)                                                                                        {return request("node/set",{id:id,permanent:permanent,plugin:plugin,properties:JSON.stringify(properties),enabled:enabled,jobPluginsEnabled:JSON.stringify(jobPluginsEnabled)},callback,scope)};
		this.node$setEnabled          =function(ids,enabled,callback,scope)                                                                                                                                     {return request("node/setEnabled",{ids:JSON.stringify(ids),enabled:enabled},callback,scope)};
		this.node$setPermanent        =function(ids,permanent,callback,scope)                                                                                                                                   {return request("node/setPermanent",{ids:JSON.stringify(ids),permanent:permanent},callback,scope)};
		this.node$shutdown            =function(ids,callback,scope)                                                                                                                                             {return request("node/shutdown",{ids:JSON.stringify(ids)},callback,scope)};
		this.node$stop                =function(ids,callback,scope)                                                                                                                                             {return request("node/stop",{ids:JSON.stringify(ids)},callback,scope)};
		this.node$wake                =function(ids,callback,scope)                                                                                                                                             {return request("node/wake",{ids:JSON.stringify(ids)},callback,scope)};
		this.plugin$getData           =function(id,callback,scope)                                                                                                                                              {return request("plugin/getData",{id:id},callback,scope)};
		this.plugin$list              =function(callback,scope)                                                                                                                                                 {return request("plugin/list",{},callback,scope)};
		this.plugin$listJob           =function(callback,scope)                                                                                                                                                 {return request("plugin/listJob",{},callback,scope)};
		this.plugin$listNode          =function(callback,scope)                                                                                                                                                 {return request("plugin/listNode",{},callback,scope)};
		this.plugin$listPostJob       =function(callback,scope)                                                                                                                                                 {return request("plugin/listPostJob",{},callback,scope)};
		this.pool$add                 =function(name,description,enabled,nodes,callback,scope)                                                                                                                  {return request("pool/add",{name:name,description:description,enabled:enabled,nodes:JSON.stringify(nodes)},callback,scope)};
		this.pool$addNodes            =function(id,nodes,callback,scope)                                                                                                                                        {return request("pool/addNodes",{id:id,nodes:JSON.stringify(nodes)},callback,scope)};
		this.pool$cancelJobs          =function(ids,callback,scope)                                                                                                                                             {return request("pool/cancelJobs",{ids:JSON.stringify(ids)},callback,scope)};
		this.pool$get                 =function(id,callback,scope)                                                                                                                                              {return request("pool/get",{id:id},callback,scope)};
		this.pool$getEnabled          =function(id,callback,scope)                                                                                                                                              {return request("pool/getEnabled",{id:id},callback,scope)};
		this.pool$getNodes            =function(id,callback,scope)                                                                                                                                              {return request("pool/getNodes",{id:id},callback,scope)};
		this.pool$ids                 =function(filter,callback,scope)                                                                                                                                          {return request("pool/ids",{filter:JSON.stringify(filter)},callback,scope)};
		this.pool$list                =function(filter,callback,scope)                                                                                                                                          {return request("pool/list",{filter:JSON.stringify(filter)},callback,scope)};
		this.pool$moveNodes           =function(from,to,nodes,callback,scope)                                                                                                                                   {return request("pool/moveNodes",{from:from,to:to,nodes:JSON.stringify(nodes)},callback,scope)};
		this.pool$pauseNodes          =function(ids,cancelJobs,callback,scope)                                                                                                                                  {return request("pool/pauseNodes",{ids:JSON.stringify(ids),cancelJobs:cancelJobs},callback,scope)};
		this.pool$rebootNodes         =function(ids,callback,scope)                                                                                                                                             {return request("pool/rebootNodes",{ids:JSON.stringify(ids)},callback,scope)};
		this.pool$remove              =function(ids,callback,scope)                                                                                                                                             {return request("pool/remove",{ids:JSON.stringify(ids)},callback,scope)};
		this.pool$removeNodes         =function(id,nodes,callback,scope)                                                                                                                                        {return request("pool/removeNodes",{id:id,nodes:JSON.stringify(nodes)},callback,scope)};
		this.pool$resumeNodes         =function(ids,callback,scope)                                                                                                                                             {return request("pool/resumeNodes",{ids:JSON.stringify(ids)},callback,scope)};
		this.pool$set                 =function(id,name,description,enabled,nodes,callback,scope)                                                                                                               {return request("pool/set",{id:id,name:name,description:description,enabled:enabled,nodes:JSON.stringify(nodes)},callback,scope)};
		this.pool$setEnabled          =function(ids,enabled,callback,scope)                                                                                                                                     {return request("pool/setEnabled",{ids:JSON.stringify(ids),enabled:enabled},callback,scope)};
		this.pool$setNodes            =function(id,nodes,callback,scope)                                                                                                                                        {return request("pool/setNodes",{id:id,nodes:JSON.stringify(nodes)},callback,scope)};
		this.pool$shutdownNodes       =function(ids,callback,scope)                                                                                                                                             {return request("pool/shutdownNodes",{ids:JSON.stringify(ids)},callback,scope)};
		this.pool$stopNodes           =function(ids,callback,scope)                                                                                                                                             {return request("pool/stopNodes",{ids:JSON.stringify(ids)},callback,scope)};
		this.pool$wakeNodes           =function(ids,callback,scope)                                                                                                                                             {return request("pool/wakeNodes",{ids:JSON.stringify(ids)},callback,scope)};
		this.preset$add               =function(name,description,actions,callback,scope)                                                                                                                        {return request("preset/add",{name:name,description:description,actions:JSON.stringify(actions)},callback,scope)};
		this.preset$execute           =function(id,callback,scope)                                                                                                                                              {return request("preset/execute",{id:id},callback,scope)};
		this.preset$get               =function(id,callback,scope)                                                                                                                                              {return request("preset/get",{id:id},callback,scope)};
		this.preset$ids               =function(filter,callback,scope)                                                                                                                                          {return request("preset/ids",{filter:JSON.stringify(filter)},callback,scope)};
		this.preset$list              =function(filter,callback,scope)                                                                                                                                          {return request("preset/list",{filter:JSON.stringify(filter)},callback,scope)};
		this.preset$remove            =function(ids,callback,scope)                                                                                                                                             {return request("preset/remove",{ids:JSON.stringify(ids)},callback,scope)};
		this.preset$set               =function(id,name,description,actions,callback,scope)                                                                                                                     {return request("preset/set",{id:id,name:name,description:description,actions:JSON.stringify(actions)},callback,scope)};
		this.server$getLog            =function(callback,scope)                                                                                                                                                 {return request("server/getLog",{},callback,scope)};
		this.server$getRuntimeInfo    =function(callback,scope)                                                                                                                                                 {return request("server/getRuntimeInfo",{},callback,scope)};
		this.server$getSystemInfo     =function(callback,scope)                                                                                                                                                 {return request("server/getSystemInfo",{},callback,scope)};
		this.server$stop              =function(callback,scope)                                                                                                                                                 {return request("server/stop",{},callback,scope)};
		this.user$add                 =function(email,password,name,surname,alias,role,enabled,callback,scope)                                                                                                  {return request("user/add",{email:email,password:password,name:name,surname:surname,alias:alias,role:role,enabled:enabled},callback,scope)};
		this.user$addGroups           =function(id,groups,callback,scope)                                                                                                                                       {return request("user/addGroups",{id:id,groups:JSON.stringify(groups)},callback,scope)};
		this.user$get                 =function(id,callback,scope)                                                                                                                                              {return request("user/get",{id:id},callback,scope)};
		this.user$ids                 =function(filter,callback,scope)                                                                                                                                          {return request("user/ids",{filter:JSON.stringify(filter)},callback,scope)};
		this.user$list                =function(filter,callback,scope)                                                                                                                                          {return request("user/list",{filter:JSON.stringify(filter)},callback,scope)};
		this.user$remove              =function(ids,callback,scope)                                                                                                                                             {return request("user/remove",{ids:JSON.stringify(ids)},callback,scope)};
		this.user$removeGroups        =function(id,groups,callback,scope)                                                                                                                                       {return request("user/removeGroups",{id:id,groups:JSON.stringify(groups)},callback,scope)};
		this.user$set                 =function(id,email,name,surname,alias,role,enabled,callback,scope)                                                                                                        {return request("user/set",{id:id,email:email,name:name,surname:surname,alias:alias,role:role,enabled:enabled},callback,scope)};
		this.user$setClient           =function(client,data,callback,scope)                                                                                                                                     {return request("user/setClient",{client:client,data:data},callback,scope)};
		this.user$setGroups           =function(id,groups,callback,scope)                                                                                                                                       {return request("user/setGroups",{id:id,groups:JSON.stringify(groups)},callback,scope)};
		this.user$setPassword         =function(id,password,callback,scope)                                                                                                                                     {return request("user/setPassword",{id:id,password:password},callback,scope)};
		this.userGroup$add            =function(name,description,users,plugins,pools,groups,permission,callback,scope)                                                                                          {return request("userGroup/add",{name:name,description:description,users:JSON.stringify(users),plugins:JSON.stringify(plugins),pools:JSON.stringify(pools),groups:JSON.stringify(groups),permission:permission},callback,scope)};
		this.userGroup$addUsers       =function(id,users,callback,scope)                                                                                                                                        {return request("userGroup/addUsers",{id:id,users:JSON.stringify(users)},callback,scope)};
		this.userGroup$get            =function(id,callback,scope)                                                                                                                                              {return request("userGroup/get",{id:id},callback,scope)};
		this.userGroup$ids            =function(filter,callback,scope)                                                                                                                                          {return request("userGroup/ids",{filter:JSON.stringify(filter)},callback,scope)};
		this.userGroup$list           =function(filter,callback,scope)                                                                                                                                          {return request("userGroup/list",{filter:JSON.stringify(filter)},callback,scope)};
		this.userGroup$remove         =function(ids,callback,scope)                                                                                                                                             {return request("userGroup/remove",{ids:JSON.stringify(ids)},callback,scope)};
		this.userGroup$removeUsers    =function(id,users,callback,scope)                                                                                                                                        {return request("userGroup/removeUsers",{id:id,users:JSON.stringify(users)},callback,scope)};
		this.userGroup$set            =function(id,name,description,users,plugins,pools,groups,callback,scope)                                                                                                  {return request("userGroup/set",{id:id,name:name,description:description,users:JSON.stringify(users),plugins:JSON.stringify(plugins),pools:JSON.stringify(pools),groups:JSON.stringify(groups)},callback,scope)};
		this.userGroup$setUsers       =function(id,users,callback,scope)                                                                                                                                        {return request("userGroup/setUsers",{id:id,users:JSON.stringify(users)},callback,scope)};
	};
	// END AUTOGENERATED

	//***********************************************************************//
	//***********************************************************************//
            
    this.addEvents(this.ModificationType.__names__);
    
    
    this.UserGroupUserGroupPermission=
	{
		VIEW:0,
		MODIFY:1,
		__names__:["VIEW","MODIFY"]
	};
        
   
    var me= this;
    this.on(this.ModificationType.__names__[this.ModificationType.all],function() {
        me.$allEventReceived = true;        
    });

	function post(url,parameters,callback,scope)
	{
		var async=(callback!=null);
		var jqXHR=$.ajax({
			url:"api/"+url,
			method:"POST",
			headers: {"croupier-user":(croupier.user!=null?croupier.user["id"]:0),"croupier-session":(croupier.user!=null?croupier.user["session"]:"login"),"croupier-format":"json"},
			data: parameters,
			async: async,
			dataType:"json",
			timeout: 10000,
			complete:(async?function(){callback.call(scope?scope:this,jqXHR.responseJSON);}:null)
		});
		return (!async?jqXHR.responseJSON:null);
	}

	function request(url,parameters,callback)
	{
		if (App.config.debug&&log4javascript&&log4javascript.isEnabled()&&log4javascript.getRootLogger().isDebugEnabled())
		{
			log4javascript.getRootLogger().debug("croupier.api.request: "+url+" "+JSON.stringify(parameters));
			console.dir(parameters);
		}
		//
		if (croupier.data.disposed())
		{
			return post(url,parameters,callback);
		}
		else
		{
			croupier.data.stop();
			if (callback!=null)
			{
				return post(url,parameters,function(response)
				{
					if (App.config.debug&&log4javascript&&log4javascript.isEnabled()&&log4javascript.getRootLogger().isDebugEnabled())
					{
						log4javascript.getRootLogger().debug("croupier.api.response: "+JSON.stringify(response));
					}
					croupier.data.request(function()
					                      {
						                      callback(response);
					                      });
				});
			}
			else
			{
				var response=post(url,parameters);
				if (App.config.debug&&log4javascript&&log4javascript.isEnabled()&&log4javascript.getRootLogger().isDebugEnabled())
				{
					log4javascript.getRootLogger().debug("croupier.api.response: "+JSON.stringify(response));
				}
				croupier.data.request(null);
				return response;
			}
		}
	}

	//***********************************************************************//
	//***********************************************************************//

	this.user=null;

	this.login=function(email,password,client,callback,scope)
	{
		this.logout();
		var parameters={};
		parameters["email"]=email;
		parameters["password"]=password;
		parameters["client"]=client;
		if (callback!=null)
		{
			return post("auth/login",parameters,function(response)
			{
				callback.call(scope,onLogin(response));
			});
		}
		else
		{
			return onLogin(post("auth/login",parameters));
		}
	};

	var onLogin=function(response)
	{
		if (response.status==croupier.ResponseStatus.SUCCESS)
		{
			croupier.user=response.value;
		}
		return response;
	};

	this.logout=function()
	{
		if (this.user!=null)
		{
			this.data.dispose();
			post("auth/logout",{},null);
			this.user=null;
		}
	};

	//***********************************************************************//
	//***********************************************************************//

	function IndexableIntList(_initialCapacity,_indexableKey,_indexableProcessor,_indexables)
	{
		function Entry(key,value,next)
		{
			this.key=key;
			this.value=value;
			this.next=next;
		}

		var loadFactor=0.75;
		var capacity=_initialCapacity;
		var table=new Array(capacity);
		var threshold=Math.floor(capacity*loadFactor);
		var mask=capacity-1;
		var size=0;
		var indexableKey=_indexableKey;
		var indexableProcessor=_indexableProcessor;

		this.get=function(key)
		{
			var index=key&mask;
			for (var e=table[index];e!=null;e=e.next)
			{
				if (e.key==key)
				{
					return e.value;
				}
			}
			return null;
		};

		this.add=function(value)
		{
			if (indexableProcessor!=null)
			{
				indexableProcessor(value);
			}
			var key=value[indexableKey];
			var index=key&mask;
			// Comprueba si ya existe la key.
			for (var e=table[index];e!=null;e=e.next)
			{
				if (e.key==key)
				{
					e.value=value;
					return false;
				}
			}
			// rehash.
			if (size>=threshold)
			{
				var oldCapacity=capacity;
				var oldMap=table;
				capacity=oldCapacity<<1;
				table=new Array(capacity);
				threshold=Math.floor(capacity*loadFactor);
				mask=capacity-1;
				for (var i=oldCapacity-1;i>=0;i--)
				{
					for (var old=oldMap[i];old!=null;)
					{
						e=old;
						old=old.next;
						index=e.key&mask;
						e.next=table[index];
						table[index]=e;
					}
				}
				index=key&mask;
			}
			// Add.
			table[index]=new Entry(key,value,table[index]);
			size++;
			return true;
		};

		this.addAll=function(values)
		{
			for (var i=0,l=values.length;i<l;i++)
			{
				this.add(values[i]);
			}
		};

		this.setAll=function(values)
		{
			this.clear();
			this.addAll(values);
		};

		this.remove=function(key)
		{
			var index=key&mask;
			for (var e=table[index],prev=null;e!=null;prev=e,e=e.next)
			{
				if (e.key==key)
				{
					if (prev!=null)
					{
						prev.next=e.next;
					}
					else
					{
						table[index]=e.next;
					}
					size--;
					return true;
				}
			}
			return false;
		};

		this.clear=function()
		{
			for (var i=capacity-1;i>=0;i--)
			{
				table[i]=null;
			}
			size=0;
		};

		this.size=function()
		{
			return size;
		};

		this.keys=function(filtered)
		{
			if (!filtered||this.filtered==null)
			{
				var keys=new Array(size);
				var index=0;
				for (var i=capacity-1;i>=0;i--)
				{
					for (var e=table[i];e!=null;e=e.next)
					{
						keys[index++]=e.key;
					}
				}
				return keys;
			}
			else
			{
				return this.filtered;
			}
		};

		this.values=function(filtered)
		{
			var values=null;
			var index=0;
			if (!filtered||this.filtered==null)
			{
				values=new Array(size);
				for (var i=capacity-1;i>=0;i--)
				{
					for (var e=table[i];e!=null;e=e.next)
					{
						values[index++]=e.value;
					}
				}
			}
			else
			{
				values=new Array(this.filtered.length);
				for (index=values.length-1;index>=0;index--)
				{
					values[index]=this.get(this.filtered[index]);
				}
			}
			return values;
		};

		if (_indexables!=null)
		{
			this.addAll(_indexables);
		}
	}

	var JOB_ID_ZERO         = 4294967296;
	var JOB_FRAGMENT_BITS   = 22;
	var JOB_FRAGMENT_MASK   = (1<<JOB_FRAGMENT_BITS)-1;
	var JOB_GROUP_BITS      = 9;
	var JOB_GROUP_MASK      = ((1<<JOB_GROUP_BITS)-1)<<JOB_FRAGMENT_BITS;
        
    this.toJobLongId = function(id) {
        return JOB_ID_ZERO*id;
    } 

	function JobList(_initialCapacity,_indexableKey,_indexableProcessor,_indexables)
	{
		IndexableIntList.call(this,_initialCapacity,_indexableKey,_indexableProcessor,_indexables);

		var get_super=this.get;

		this.get=function(key)
		{
			if (key<JOB_ID_ZERO)
			{
				return get_super(key);
			}
			else
			{
				var job=get_super(Math.floor(key/JOB_ID_ZERO));
				if (job!=null)
				{
					var group=(key&JOB_GROUP_MASK)>>JOB_FRAGMENT_BITS;
					var fragment=key&JOB_FRAGMENT_MASK;
					if (group==0&&fragment==0)
					{
						return job;
					}
					else if (group==0)
					{
						return (job.indexer==null&&job.children!=null&&fragment>=1&&fragment<=job.children.length?job.children[fragment-1]:null);
					}
					else if (job.indexer!=null&&group>=1&&group<=job.indexer.length)
					{
						job=job.indexer[group-1];
						return (fragment==0?job:(job.children!=null&&fragment>=1&&fragment<=job.children.length?job.children[fragment-1]:null));
					}
					else
					{
						return null;
					}
				}
				return job;
			}
		}
	}
	JobList.prototype=new IndexableIntList();
	JobList.prototype.constructor=JobList;

	//***********************************************************************//
	//***********************************************************************//

	this.data=new function()
	{
		function InternalData()
		{
			this.id=-1;
			this.refresh=0;
			this.timeout=null;
			this.callback=null;
		}

		var internal=null;

		this.start=function(refresh,nodesFilter,jobsFilter,callback)
		{
			if (this.disposed())
			{
				internal=new InternalData();
				this.nodes=new IndexableIntList(1024,"id",function (node)
				{
					node.registered=dateFormat(node.registered);
				});
				this.pools=new IndexableIntList(1024,"id");
				this.jobs=new JobList(1024,"id",function (job)
				{
					var indexer=[];
					jobReindex(job,job,null,0,indexer);
					job.root=job;
					job.longId=croupier.toJobLongId(job.id);
					if (indexer.length>0)
					{
						job.indexer=indexer;
					}
				});
				this.users=new IndexableIntList(1024,"id");
				this.userGroups=new IndexableIntList(1024,"id",function (group)
				{
					group.pools=new IndexableIntList(16,"pool",null,group.pools);
					group.groups=new IndexableIntList(16,"other",null,group.groups);
				});
				this.presets=new IndexableIntList(1024,"id");
				this.crons=new IndexableIntList(1024,"id");
			}
			internal.refresh=refresh;
			this.nodes.filter=(nodesFilter!=null?JSON.stringify(nodesFilter):null);
			this.jobs.filter=(jobsFilter!=null?JSON.stringify(jobsFilter):null);
			internal.callback=(callback!=null?callback:function(){});
			this.request(internal.callback);
		};

		this.stop=function()
		{
			if (!this.disposed()&&internal.timeout!=null)
			{
				clearTimeout(internal.timeout);
				internal.timeout=null;
			}
		};

		this.request=function(callback)
		{
			if (App.config.debug&&log4javascript&&log4javascript.isEnabled()&&log4javascript.getRootLogger().isDebugEnabled())
			{
				log4javascript.getRootLogger().debug("croupier.data.request");
			}
			//
			if (!this.disposed())
			{
				var parameters={id:internal.id,nodesFilter:this.nodes.filter,jobsFilter:this.jobs.filter};
				var internalCallback=internal.callback;
				this.stop();
				if (callback!=null)
				{
					post("modification/list",parameters,function(response)
					{
						onModifications(croupier.data,internal,response);
						if (callback!=internalCallback)
						{
							callback(response);
						}
					});
				}
				else
				{
					return onModifications(croupier.data,internal,post("modification/list",parameters));
				}
			}
			return null;
		};

		function onModifications(root,internal,response)
		{
			if (!root.disposed())
			{
				var time=0;
				if (App.config.debug&&log4javascript&&log4javascript.isEnabled()&&log4javascript.getRootLogger().isDebugEnabled())
				{
					time=new Date().getTime();
					log4javascript.getRootLogger().debug("croupier.data.response: "+JSON.stringify(response));
				}
				// Actualiza los datos.
				var callback=internal.callback;
				if (response!=null&&response.status==croupier.ResponseStatus.SUCCESS)
				{
					internal.id=response.value.id;
					root.nodes.filtered=response.value.nodesFiltered;
					root.jobs.filtered=response.value.jobsFiltered;
					var modifications=response.value.modifications;
					if (modifications!=null)
					{
						for (var i=0,l=modifications.length;i<l;i++)
						{
							var m=modifications[i];
							processModification(root,m.type,m.id,m.data);
						}
					}
					// Refresh.
					internal.timeout=setTimeout(function(){croupier.data.request(internal.callback);},internal.refresh);
				}
				else
				{
					root.dispose();
					croupier.user=null;
				}
				// Log.
				if (App.config.debug&&log4javascript&&log4javascript.isEnabled()&&log4javascript.getRootLogger().isDebugEnabled())
				{
					time=new Date().getTime()-time;
					log4javascript.getRootLogger().debug("croupier.onModified: "+time+" ms");
				}
				// Callback.
				if (callback!=null)
				{
					callback(response);
				}
			}
			return response;
		}

		function processModification(root,type,id,data)
		{
                    
                        if (type==croupier.ModificationType.job$remove) console.debug("JOB REMOVE start");
			if (App.config.debug&&log4javascript&&log4javascript.isEnabled()&&log4javascript.getRootLogger().isDebugEnabled())
			{
				log4javascript.getRootLogger().debug("croupier.data.processModified: "+croupier.ModificationType.__names__[type]+" - "+(id<JOB_ID_ZERO?id:((id/JOB_ID_ZERO)+"_"+((id&JOB_GROUP_MASK)>>JOB_FRAGMENT_BITS)+"_"+(id&JOB_FRAGMENT_MASK)))+" - "+JSON.stringify(data));
			}
			//
			var o=null;
			if (type==croupier.ModificationType.all)
			{
				root.config={job:data.jobConfig};
				root.plugins={job:data.jobPlugins,postJob:data.postJobPlugins,node:data.nodePlugins};
				root.nodes.setAll(data.nodes);
				root.pools.setAll(data.pools);
				root.jobs.setAll(data.jobs);
				root.users.setAll(data.users);
				root.userGroups.setAll(data.userGroups);
				root.presets.setAll(data.presets);
				root.crons.setAll(data.crons);
				root.permissions=data.permissions;
			}
			// Plugins.
			else if (type==croupier.ModificationType.plugin$list)
			{
				root.plugins.job=data[0];
				root.plugins.postJob=data[1];
				root.plugins.node=data[2];
			}
			// Node.
			else if (type==croupier.ModificationType.node$list)
			{
				root.nodes.setAll(data);
			}
			else if (type==croupier.ModificationType.node$add)
			{
				if (!root.nodes.add(data)) return;
			}
			else if (type==croupier.ModificationType.node$remove)
			{
				if (!root.nodes.remove(id)) return;
			}
			else if (type==croupier.ModificationType.node$set)
			{
				o=root.nodes.get(id);
				o.permanent=data.permanent;
				o.plugin=data.plugin;
				o.properties=data.properties;
				o.enabled=data.enabled;
				o.jobPlugins=data.jobPlugins;
			}
			else if (type==croupier.ModificationType.node$setPermanent)
			{
				root.nodes.get(id).permanent=data;
			}
			else if (type==croupier.ModificationType.node$setEnabled)
			{
				root.nodes.get(id).enabled=data;
			}
			else if (type==croupier.ModificationType.node$setStatus)
			{
				o=root.nodes.get(id);
				o.status=data.status;
				o.progress=data.progress;
				o.on=data.on;
			}
			else if (type==croupier.ModificationType.node$setBasicSystemInfo)
			{
				root.nodes.get(id).basicSystemInfo=data;
			}
			else if (type==croupier.ModificationType.node$setBasicRuntimeInfo)
			{
				root.nodes.get(id).basicRuntimeInfo=data;
			}
			else if (type==croupier.ModificationType.node$setJobPlugins)
			{
				root.nodes.get(id).jobPlugins=data;
			}
			else if (type==croupier.ModificationType.node$addPool)
			{
				root.nodes.get(id).pools.push(data);
			}
			else if (type==croupier.ModificationType.node$removePool)
			{
				if (!removeFromArray(root.nodes.get(id).pools,data)) return;
			}
			else if (type==croupier.ModificationType.node$addJob)
			{
				root.nodes.get(id).jobs.push(data);
			}
			else if (type==croupier.ModificationType.node$removeJob)
			{
				if (!removeFromArray(root.nodes.get(id).jobs,data)) return;
			}
			// Pool.
			else if (type==croupier.ModificationType.pool$list)
			{
				root.pools.setAll(data);
			}
			else if (type==croupier.ModificationType.pool$add)
			{
                                console.debug("DATA:");
                                console.debug(data);
				if (!root.pools.add(data)) return;
			}
			else if (type==croupier.ModificationType.pool$remove)
			{
                                
				if (!root.pools.remove(id)) return;
			}
			else if (type==croupier.ModificationType.pool$set)
			{
				o=root.pools.get(id);
				o.name=data.name;
				o.description=data.description;
				o.enabled=data.enabled;
			}
			else if (type==croupier.ModificationType.pool$setEnabled)
			{
				root.pools.get(id).enabled=data;
			}
			else if (type==croupier.ModificationType.pool$addNode)
			{
				root.pools.get(id).nodes.push(data);
			}
			else if (type==croupier.ModificationType.pool$removeNode)
			{
				if (!removeFromArray(root.pools.get(id).nodes,data)) return;
			}
			// Job.
			else if (type==croupier.ModificationType.job$list)
			{
				root.jobs.setAll(data);
			}
			else if (type==croupier.ModificationType.job$add)
			{
				if (!root.jobs.add(data)) return;
			}
			else if (type==croupier.ModificationType.job$remove)
			{
                                
				if (!root.jobs.remove(id/croupier.JOB_ID_ZERO)) return;
			}
			else if (type==croupier.ModificationType.job$set)
			{
				o=root.jobs.get(id);
				o.name=data.name;
				o.description=data.description;
				o.priority=data.priority;
				o.retries=data.retries;
				o.timeout=data.timeout;
				o.primaryNodes=data.primaryNodes;
				o.secondaryNodes=data.secondaryNodes;
				o.primaryPools=data.primaryPools;
				o.secondaryPools=data.secondaryPools;
			}
			else if (type==croupier.ModificationType.job$setPriority)
			{
				root.jobs.get(id).priority=data;
			}
			else if (type==croupier.ModificationType.job$setStatus)
			{
                            
				o=root.jobs.get(id);
                                console.log(o);
				o.status=data.status;
				o.progress=data.progress;
				o.start=(data.start!=null?data.start:null);
				o.finish=(data.finish!=null?data.finish:null);
				o.time=data.time;
				o.warnings=data.warnings;
				o.errors=data.errors;
                                o.remaining=data.remaining || null;
                                
                            
			}
			else if (type==croupier.ModificationType.job$setNode)
			{
				root.jobs.get(id).node=data;
			}
			else if (type==croupier.ModificationType.job$setUser)
			{
				root.jobs.get(id).user=data;
			}
			else if (type==croupier.ModificationType.job$setUserGroup)
			{
				root.jobs.get(id).userGroup=data;
			}
			else if (type==croupier.ModificationType.job$removePrimaryNode)
			{
				if (!removeFromArray(root.jobs.get(id).primaryNodes,data)) return;
			}
			else if (type==croupier.ModificationType.job$removeSecondaryNode)
			{
				if (!removeFromArray(root.jobs.get(id).secondaryNodes,data)) return;
			}
			else if (type==croupier.ModificationType.job$removePrimaryPool)
			{
				if (!removeFromArray(root.jobs.get(id).primaryPools,data)) return;
			}
			else if (type==croupier.ModificationType.job$removeSecondaryPool)
			{
				if (!removeFromArray(root.jobs.get(id).secondaryPools,data)) return;
			}
			// User.
			else if (type==croupier.ModificationType.user$list)
			{
				root.users.setAll(data);
			}
			else if (type==croupier.ModificationType.user$add)
			{
				if (!root.users.add(data)) return;
			}
			else if (type==croupier.ModificationType.user$remove)
			{
				if (!root.users.remove(id)) return;
			}
			else if (type==croupier.ModificationType.user$set)
			{
				o=root.users.get(id);
				o.email=data.email;
				o.name=data.name;
				o.surname=data.surname;
				o.alias=data.alias;
				o.role=data.role;
				o.enabled=data.enabled;
			}
			else if (type==croupier.ModificationType.user$addGroup)
			{
				root.users.get(id).groups.push(data);
			}
			else if (type==croupier.ModificationType.user$removeGroup)
			{
				if (!removeFromArray(root.users.get(id).groups,data)) return;
			}
			// UserGroup.
			else if (type==croupier.ModificationType.userGroup$list)
			{
				root.userGroups.setAll(data);
			}
			else if (type==croupier.ModificationType.userGroup$add)
			{
				if (!root.userGroups.add(data)) return;
			}
			else if (type==croupier.ModificationType.userGroup$remove)
			{
				if (!root.userGroups.remove(id)) return;
			}
			else if (type==croupier.ModificationType.userGroup$set)
			{
				o=root.userGroups.get(id);
				o.name=data.name;
				o.description=data.description;
				o.users=data.users;
				o.plugins=data.plugins;
				o.pools.setAll(data.pools);
				o.groups.setAll(data.groups);
			}
			else if (type==croupier.ModificationType.userGroup$addUser)
			{
				root.userGroups.get(id).users.push(data);
			}
			else if (type==croupier.ModificationType.userGroup$removeUser)
			{
				if (!removeFromArray(root.userGroups.get(id).users,data)) return;
			}
			else if (type==croupier.ModificationType.userGroup$removePool)
			{
				if (!root.userGroups.get(id).pools.remove(data)) return;
			}
			else if (type==croupier.ModificationType.userGroup$removeGroup)
			{
				if (!root.userGroups.get(id).groups.remove(data)) return;
			}
			// Preset.
			else if (type==croupier.ModificationType.preset$add)
			{
				if (!root.presets.add(data)) return;
			}
			else if (type==croupier.ModificationType.preset$remove)
			{
				if (!root.presets.remove(id)) return;
			}
			else if (type==croupier.ModificationType.preset$set)
			{
				o=root.presets.get(id);
				o.name=data.name;
				o.description=data.description;
				o.actions=data.actions;
			}
			// Cron.
			else if (type==croupier.ModificationType.cron$add)
			{
				if (!root.crons.add(data)) return;
			}
			else if (type==croupier.ModificationType.cron$remove)
			{
				if (!root.crons.remove(id)) return;
			}
			else if (type==croupier.ModificationType.cron$set)
			{
				o=root.crons.get(id);
				o.name=data.name;
				o.description=data.description;
				o.hour=data.hour;
				o.minute=data.minute;
				o.day=data.day;
				o.month=data.month;
				o.year=data.year;
				o.dayOfWeek=data.dayOfWeek;
				o.timeZone=data.timeZone;
				o.preset=data.preset;
				o.enabled=data.enabled;
			}
			else
			{
				console.error("processModified(): type not processed ("+type+")")
			}
			if (App.config.debug)
			{
				console.info("[App.API] fires event: "+croupier.ModificationType.__names__[type]);
				console.info("[App.API] ID:"+id);
			}
                        if (type==croupier.ModificationType.job$remove) console.debug("JOB REMOVE end");
			croupier.fireEvent(croupier.ModificationType.__names__[type],data,id);
		}

		this.dispose=function()
		{
			if (!this.disposed())
			{
				this.stop();
				this.config=null;
				this.plugins=null;
				this.nodes=null;
				this.pools=null;
				this.jobs=null;
				this.users=null;
				this.userGroups=null;
				this.presets=null;
				this.crons=null;
				internal=null;
			}
		};

		this.disposed=function()
		{
			return (internal==null);
		};

		function removeFromArray(array,value)
		{
			var index=$.inArray(value,array);
			if (index!=-1)
			{
				array.splice(index,1);
				return true;
			}
			else
			{
				return false;
			}
		}

		function dateFormat(date)
		{
			return date;//new Date(date).toLocaleString();
		}

		function jobReindex(job,root,parent,fragment,indexer)
		{
			if (parent!=null)
			{
				job.root=root;
				job.parent=parent;
				if (job.group!=null)
				{
					job.part=job.group<<JOB_FRAGMENT_BITS;
					indexer.push(job);
				}
				else
				{
					job.part=parent.part|fragment;
				}
				job.longId=croupier.toJobLongId(root.id)+job.part;
				job.id=root.id;
			}
			if (job.children!=null)
			{
				fragment=0;
				for (var i=0;i<job.children.length;i++)
				{
					jobReindex(job.children[i],root,job,++fragment,indexer);
				}
			}
			// Procesa los datos.
			if (job.created!=null)
			{
				job.created=dateFormat(job.created);
			}
			if (job.start!=null)
			{
				job.start=dateFormat(job.start);
			}
			if (job.finish!=null)
			{
				job.finish=dateFormat(job.finish);
			}
		}
	}; 
}

});
/**
 * 
 * 
 * @param {String} action
 * @param {String} entity
 * @param {Array} models
 * @param {Function} cbDone
 * @param {Object} scope
 * @static
 * @returns {void}
 */
App.API.multiAction=
    function(action,entity,models,cbDone,scope) {
            croupier.api[entity+"$"+action](models.toIds(),function(result) {
                if (result.status == croupier.ResponseStatus.SUCCESS)
                {
                   if ($.isFunction(cbDone)) 
                    cbDone.call(scope || this);
                   
                   if (App.mainBox)
                   {
                       App.mainBox.progress(100);
                       App.mainBox.done();
                   }
                }
                    
            });
        }





/**
 * Croupier API Class Singleton prototype.
 * 
 * @type App.API
 * @static 
 * @name croupier
 * @namespace window
 */
window.croupier = window.croupier || new App.API();
croupier.JOB_ID_ZERO         = 4294967296;